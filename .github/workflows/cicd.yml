name: Full CI/CD - Lint, Build, Push, and Deploy (Compose + MySQL)

on:
  push:
    branches: ["deploy"]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with ruff
        run: ruff check .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/najungh_portfolio:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 with Docker Compose (MySQL + Web)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e

            APP_DIR="/home/ubuntu/najungh"
            mkdir -p "$APP_DIR"
            cd "$APP_DIR"

            # 0) Docker 데몬/Compose 보장
            if ! command -v docker >/dev/null 2>&1; then
              echo "Docker not found. Install Docker CE first."; exit 1
            fi
            sudo systemctl enable --now docker
            sudo docker version || (echo "Docker daemon not running" && exit 1)

            if ! sudo docker compose version >/dev/null 2>&1; then
              echo "Docker Compose plugin not found. Installing..."
              # Create the plugins directory if it doesn't exist
              sudo mkdir -p /usr/local/lib/docker/cli-plugins
              # Download the latest stable release of Docker Compose
              sudo curl -SL "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s | tr '[:upper:]' '[:lower:]')-$(uname -m)" -o /usr/local/lib/docker/cli-plugins/docker-compose
              sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
            fi

            # 1) (프라이빗이면) Docker Hub 로그인
            if [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
              echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            fi

            # 2) Compose용 외부 네트워크(최초 1회)
            sudo docker network create appnet || true

            # 3) .env 생성 (Secrets 주입)
           

            # 4) docker-compose.prod.yml 생성 (Compose v2: version 키 생략)
            cat > docker-compose.prod.yml << 'EOF'
            services:
              web:
                image: ${DOCKERHUB_IMAGE}
                container_name: najungh_web
                restart: always
                ports:
                  - "80:8000"
            
            EOF

            # 이미지 경로 치환
            sudo sed -i "s|\${DOCKERHUB_IMAGE}|${{ secrets.DOCKERHUB_USERNAME }}/najungh_portfolio:latest|g" docker-compose.prod.yml

            # 5) 배포
            sudo docker compose -f docker-compose.prod.yml pull
            sudo docker compose -f docker-compose.prod.yml up -d
            sudo docker compose -f docker-compose.prod.yml ps

