name: Deploy najungh.site

on:
  push:
    branches: [ "dev" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug - list files
        run: |
          pwd
          ls -al
          find . -maxdepth 3 -type f | sed -n '1,200p' || true

      # 빈 업로드 방지
      - name: Guard - ensure non-empty
        run: |
          set -e
          COUNT="$(find . -type f | wc -l)"
          [ "$COUNT" -gt 0 ] || (echo "No files to upload" && exit 1)
          echo "Found $COUNT files."

      - name: Upload to EC2
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ".dockerignore,docker-compose.yml,Dockerfile,nginx.conf,requirements.txt,server.py,static"
          target: ${{ secrets.EC2_PATH }}
          overwrite: true
          strip_components: 0

      - name: Compose up on EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail
            cd "${{ secrets.EC2_PATH }}"

            # Define a function to handle both docker compose syntaxes
            dc() {
              if command -v docker-compose >/dev/null 2>&1; then
                docker-compose "$@"
              elif command -v docker >/dev/null 2>&1 && docker compose version >/dev/null 2>&1; then
                docker compose "$@"
              else
                echo "ERROR: Neither docker-compose nor docker compose is available." >&2; return 1
              fi
            fi

            # certbot 이메일 주입
            if [ ! -f .env ]; then
              echo "CERTBOT_EMAIL=${{ secrets.CERTBOT_EMAIL }}" > .env
            elif ! grep -q '^CERTBOT_EMAIL=' .env; then
              echo "CERTBOT_EMAIL=${{ secrets.CERTBOT_EMAIL }}" >> .env
            fi

            # 최신 빌드 & 기동
            export COMPOSE_PROJECT_NAME=najungh-site
            dc up -d --build --remove-orphans

            # nginx 구문검사 및 리로드(인증서 생기면 443 활성화)
            docker exec nginx nginx -t && docker exec nginx nginx -s reload || true

      - name: Smoke test (HTTP & HTTPS)
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            # 80: ACME/리다이렉트 전용이지만 /healthz 허용됨
            curl -fsS http://127.0.0.1/healthz | grep -i ok
            # 443: 인증서 발급 완료 후 통과 (초기엔 실패 가능하므로 허용)
            curl -kfsS https://127.0.0.1/healthz | grep -i ok || true
